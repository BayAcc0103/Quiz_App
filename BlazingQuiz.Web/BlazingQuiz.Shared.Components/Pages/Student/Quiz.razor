@page "/student/quiz"

@layout QuizPageLayout 
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState
@inject IPlatform Platform

@*QuizInfo*@
@*Timer*@
@*Question*@
@*Option*@
@*NextButton(SubmitTest)*@
@*ExitTestButton  *@

@if(QuizState.Quiz != null)
{
    string style = "";
    if (Platform.IsMobileApp)
    {
        style = "height: calc(100vh - 75px- 15px)";
    }
<div class="row mb-3">
    @*Timer*@
    <div class="col-sm-12 d-flex flex-column" style="@style">
        <div class="quiz-header">
                <div class="my-1 d-flex justify-content-between align-items-center">
                    <h6>@_questions.Count of @QuizState.Quiz.TotalQuestions</h6>
                    <div>
                        <QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync" />
                    </div>
                </div>
                <h4 class="mt-3 mb-0 fw-bold">@_question.Text</h4>
                <hr />
        </div>
        <div class="quiz-body flex-grow-1">
                @foreach (var o in _question.Options)
                {
                    <div class="d-flex gap-2 p-3 mb-3 bg-white option-box" @onclick="() => _selectedOptionId = o.Id">
                        <input type="radio" name="rdo_@_question.Id" id="rdo_@o.Id" class=""
                               checked="@(_selectedOptionId == o.Id)"
                               @onchange="() => _selectedOptionId = o.Id" />
                        <label for="rdo_@o.Id" class="d-block">@o.Text</label>
                    </div>
                }
        </div>
        <div class="quiz-footer">
                @if (_errorMessage != null)
                {
                    <div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
                        <label class="text-white">@_errorMessage</label>
                        <button type="button" class="btn btn-sm btn-light" @onclick="() => _errorMessage = null">X</button>
                    </div>
                }
                <hr />
                <div class="d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-danger" @onclick="() => _showExitQuizConfirmation = true">Exit Test</button>
                    @if (!IsLastQuestion)
                    {
                        <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>
                    }
                </div>
        </div>
    </div>
</div>
<style>
    .option-box {
        transition: all ease 0.2s;
    }
    .option-box:hover {
        border-radius: 10px;
        box-shadow: 0 0 18px 1px #bebebe;
    }
</style>
}

@if (_submitQuizMessage != null)
{
    <Modal Title="Quiz Submitted" OnActionButtonClick="RedirectToMyQuizes" OnCancelClick="RedirectToMyQuizes">
        <p class="text-success h5">@_submitQuizMessage</p>
    </Modal>
}

@if (_showExitQuizConfirmation)
{
    <Modal Title="Exit Quiz?" OnActionButtonClick="ExitQuizAsync"
           ActionButtonText="Yes"
           OnCancelClick="() => _showExitQuizConfirmation = false">
        <h5 class="text-danger">Do you realy want to exit the quiz</h5>
    </Modal>
}

@code {
    private QuestionDto _question = new();
    private int _selectedOptionId;
    private List<QuestionDto> _questions = [];
    private bool IsLastQuestion => _questions.Count == QuizState.Quiz.TotalQuestions;
    private string? _errorMessage;
    private string? _submitQuizMessage;
    private bool _showExitQuizConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if(QuizState.Quiz == null || QuizState.StudentQuizId == 0)
        {
            NavigationManager.NavigateTo("student/home", replace: true);
            return;
        }
        await LoadNextQuestionAsync();
    }
    private async Task SaveAndNextQuestionAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
            await LoadNextQuestionAsync();
    }

    private async Task SubmitQuizAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
        {
            AppState.ShowLoader("Sumitting the quiz");
            try
            {
                QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
                if(!result.IsSuccess)
                {
                    //Show error alert
                    _errorMessage = result.ErrorMessage;
                    return;
                }
                //TODO: Show the result in Modal Popup or in a separate page
                _submitQuizMessage = "Quiz submitted successfully";
            }
            catch (Exception ex)
            {
                //Show error alert
                _errorMessage = ex.Message;
                return;
            }
            finally
            {
                AppState.HideLoader();
            }
        }
    }

    private async Task ExitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Exiting the quiz");
            QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            RedirectToMyQuizes();
        }
        catch (Exception ex)
        {
            //Show error alert
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task<bool> SaveQuestionResponseAsync()
    {
        _errorMessage = null;
        if (_selectedOptionId == 0)
        {
            //Show error alert
            _errorMessage = "Please select an option";
            return false;
        }

        AppState.ShowLoader("Saving your response...");
        try
        {
            StudentQuizQuestionResponseDto dto = new(QuizState.StudentQuizId, _question.Id, _selectedOptionId);
            QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(QuizState.StudentQuizId, dto);
            if (!result.IsSuccess)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return false;
            }
            _selectedOptionId = 0;
            return true;
        }
        catch (Exception ex)
        {
            //Show error alert
            _errorMessage = ex.Message;
            return false;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task LoadNextQuestionAsync()
    {
        AppState.ShowLoader("Loading question...");
        try
        {
            QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess || result.Data == null)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            _question = result.Data;
            _questions.Add(_question);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private void RedirectToMyQuizes()
    {
        QuizState.StopQuiz();
        NavigationManager.NavigateTo("student/my-quizes", replace: true);
    }
    private async Task AutoSubmitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Auto submitting the quiz");
            QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
            if(!result.IsSuccess)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            //TODO: Show the result in Modal Popup or in a separate page
            _submitQuizMessage = "Quiz submitted successfully";
        }
        catch (Exception ex)
        {
            //Show error alert
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }
}
