@page "/student/my-quizes"
@using BlazingQuiz.Shared.Components.Apis
@inject IAppState AppState
@inject IStudentQuizApi StudentQuizApi
@inject IPlatform Platform
<h3>MyQuizes</h3>

<div class="container-fluid">
    <div class="row">
        <QuickGrid ItemsProvider="_itemsProvider" Pagination="_paginationState" Class="table table-striped table-hover">
            <PropertyColumn Property="q => q.QuizName" Title="Quiz Name" />
            <PropertyColumn Property="q => q.CategoryName" Title="Category Name" />
            <PropertyColumn Property="q => q.Status" />
            <PropertyColumn Property="q => q.StartedOn" Title="Started" Format="dd MM yyyy hh:mm" />
            <TemplateColumn Title="Completed">
                @if (context.CompletedOn.HasValue)
                {
                    <span>@context.CompletedOn.Value.ToString("dd MM yyyy hh:mm")</span>
                }
                else
                {
                    if (context.Status == "Exited")
                    {
                        <span>Quiz Exited</span>
                    }
                    else
                    {
                        <span>-</span>
                    }
                }
            </TemplateColumn>
            <PropertyColumn Property="q => q.Total" Class="text-center" />
            <TemplateColumn Title="Result">
                @if (context.Status == "Completed")
                {
                    <a href="/student/quiz-result/@context.Id" class="btn btn-sm btn-primary">Result</a>
                }
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="_paginationState" />
    </div>
</div>
@code {
    private int _defaultPageSize = 10;
    private GridItemsProvider<StudentQuizDto>? _itemsProvider;

    private PaginationState _paginationState = new ();
    protected override void OnInitialized()
    {
        if(Platform.IsMobileApp)
        {
            _defaultPageSize = 8;
        }
        _paginationState.ItemsPerPage = _defaultPageSize;

        _itemsProvider = async (request) =>
        {
            AppState.ShowLoader("Loading quizes");
            var pageResult = await StudentQuizApi.GetStudentQuizesAsync(request.StartIndex, request.Count ?? _defaultPageSize);
            AppState.HideLoader();
            return GridItemsProviderResult.From(pageResult.Records, pageResult.TotalCount);
        };
    }
}
