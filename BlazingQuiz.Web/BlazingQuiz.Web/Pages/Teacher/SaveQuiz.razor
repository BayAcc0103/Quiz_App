@page "/teacher/add-quiz"
@page "/teacher/edit-quiz/{quizId:guid?}"

@using BlazingQuiz.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = nameof(UserRole.Teacher))]

@inject NavigationManager NavigationManager
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject QuizImageService QuizImageService
@inject QuestionImageService QuestionImageService

<h1>@(IsEditCase ? "Update Quiz" : "Add a Quiz")</h1>
<hr/>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
<DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="0">Select a category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value="_quiz.Name" class="form-control"></InputText>
                <ValidationMessage For="() => _quiz.Name" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control"></InputNumber>
                <ValidationMessage For="() => _quiz.TotalQuestions" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (in minutes)</label>
                <InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control"></InputNumber>
                <ValidationMessage For="() => _quiz.TimeInMinutes" />
            </div>
        </div>

        <div class="col-sm-12">
            <!-- Image Upload Section -->
            <div class="mb-3">
                <label class="form-label">Quiz Image</label>
                @if (!string.IsNullOrEmpty(_quiz.ImagePath))
                {
                    <div class="mb-2">
                        <img src="@QuizImageService.GetImageUrl(_quiz.ImagePath)" alt="Quiz Image" class="img-thumbnail" style="max-width: 150px; max-height: 150px;" />
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-danger" @onclick="RemoveImageAsync" title="Remove Image">Remove Image</button>
                        </div>
                    </div>
                }
                <FileUpload CurrentFile="_selectedImageFile" 
                           OnFileChanged="OnImageFileChanged" 
                           AcceptedFileTypes="image/*" 
                           MaxFileSize="10 * 1024 * 1024"
                           UploadText="Click or drag image here to upload"
                           UploadHint="Supports JPG, PNG, GIF up to 10MB" />
            </div>
        </div>

        <hr/>
        <h4 class="">Questions</h4>

        <ol>
            @foreach(var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                var questionIndex = _quiz.Questions.IndexOf(q);
                <li class="shadow p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <textarea @bind="q.Text" class="form-control" row="3"></textarea>
                        <button type="button" class="btn btn-outline-danger ms-2" @onclick="() => DeleteQuestionAsync(q)" title="Delete Question">X</button>
                    </div>
                    
                    <!-- Question Type Selection -->
                    <div class="mb-3">
                        <h6>Question Type</h6>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="questionType_@random" value="multiple-choice" checked="@(!q.IsTextAnswer)" @onchange="() => { q.IsTextAnswer = false; OnQuestionTypeChanged(q); }">
                            <label class="form-check-label">Multiple Choice</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="questionType_@random" value="text-input" checked="@(q.IsTextAnswer)" @onchange="() => { q.IsTextAnswer = true; OnQuestionTypeChanged(q); }">
                            <label class="form-check-label">Text Input</label>
                        </div>
                    </div>
                    
                    <!-- Question Image Upload Section -->
                    <div class="mb-3">
                        <label class="form-label">Question Image</label>
                        @if (!string.IsNullOrEmpty(q.ImagePath))
                        {
                            <div class="mb-2">
                                <img src="@QuestionImageService.GetImageUrl(q.ImagePath)" alt="Question Image" class="img-thumbnail" style="max-width: 150px; max-height: 150px;" />
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveQuestionImageAsync(q)" title="Remove Question Image">Remove Image</button>
                                </div>
                            </div>
                        }
                        <FileUpload CurrentFile="@GetQuestionImageFile(q)" 
                                   OnFileChanged="@(file => OnQuestionImageFileChanged(q, file))" 
                                   AcceptedFileTypes="image/*" 
                                   MaxFileSize="10 * 1024 * 1024"
                                   UploadText="Click or drag question image to upload"
                                   UploadHint="Supports JPG, PNG, GIF up to 10MB" />
                    </div>
                    
                    @if (!q.IsTextAnswer)
                    {
                        <!-- Multiple Choice Options -->
                        <h6>Options</h6>
                        <ol>
                            @foreach (var o in q.Options)
                            {
                                <li class="p-2 mb-2">
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            <input class="form-check-input mt-0" type="radio" name="option_radio_@random" checked="@o.IsCorrect" @onchange="() => SetOptionAsCorrectAnswer(q, o)">
                                        </div>
                                        <input type="text" class="form-control" aria-label="Text input with checkbox" @bind="o.Text"/>
                                        <button type="button" class="btn btn-outline-danger" @onclick="() => q.Options.Remove(o)">X</button>
                                    </div>
                                </li>
                            }
                        </ol>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-sm btn-info" @onclick="() => AddOptionToQuestion(q)">+ Add Option</button>
                        </div>
                    }
                    else
                    {
                        <!-- Text Input Answer -->
                        <h6>Correct Answer</h6>
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="Enter the correct answer" @bind="q.TextAnswer"/>
                        </div>
                    }
                </li>
            }
        </ol>
        <div class="mt-3 d-flex justify-content-center">
            <button type="button" class="btn btn-info" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">+ Add Question </button>
        </div>

        <div class="col-sm-4">
            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
                    <label class="form-check-label" for="quizIsActive">Is Active?</label>
                </div>
            </div>
        </div>

        <hr/>
        <button type="submit" class="btn btn-success">Save Quiz</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public Guid? QuizId { get; set; }

    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;

    private QuizSaveDto _quiz = new();

    private CategoryDto[] _categories = [];

    private IBrowserFile? _selectedImageFile;
    private int _imageUploadProgress;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditCase)
        {
            //Fetch _quiz from API
            AppState.ShowLoader("Loading Quiz");
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            AppState.HideLoader();
            if (quiz == null)
            {
                await ShowAlertAsync("Quiz not found.");
                NavigationManager.NavigateTo("/teacher/manage-quizzes");
                return;
            }
            _quiz = quiz;
        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Questions = [question];
        }
        AppState.ShowLoader("Loading categories");
        _categories = await CategoryApi.GetCategoriesAsync();
        AppState.HideLoader();
    }

    protected override void OnParametersSet()
    {
        if(!QuizId.HasValue && _quiz.Id != Guid.Empty)
        {
            //We are in EditMode, and we clicked on Add new Quiz on the left nav menu
            _quiz = new();
            _quiz.Questions = [GetDefaultEmptyQuestion()];
        }
    }

    private QuestionDto GetDefaultEmptyQuestion() =>  new QuestionDto
        {
            Options = [new(), new()],
            IsTextAnswer = false
        };

    private void SetOptionAsCorrectAnswer(QuestionDto q, OptionDto o)
    {
        foreach (var option in q.Options)
        {
            option.IsCorrect = false;
        }
        o.IsCorrect = true;
    }

    private async Task SaveQuizAsync()
    {
        var errorMessage = _quiz.Validate();
        if (!string.IsNullOrEmpty(errorMessage))
        {
            await ShowAlertAsync(errorMessage);
            return;
        }

        AppState.ShowLoader("Saving quiz");
        var response = await QuizApi.SaveQuizAsync(_quiz);
        AppState.HideLoader();
        
        if (!response.IsSuccess)
        {
            await ShowAlertAsync(response.ErrorMessage);
            return;
        }

        // If we have a new image to upload, do it after saving the quiz
        if (_selectedImageFile != null && _quiz.Id != Guid.Empty)
        {
            AppState.ShowLoader("Uploading quiz image...");
            try
            {
                // Since QuizImageService doesn't currently support progress tracking, we'll simulate it
                for (int i = 0; i <= 100; i += 10)
                {
                    _imageUploadProgress = i;
                    StateHasChanged();
                    await Task.Delay(50); // Simulate progress
                }

                var result = await QuizImageService.UploadQuizImageAsync(_quiz.Id, _selectedImageFile);
                
                if (result.IsSuccess)
                {
                    // Update the current quiz with the new image path (we need to reload quiz to get the updated image path)
                    var updatedQuiz = await QuizApi.GetQuizToEditAsync(_quiz.Id);
                    if (updatedQuiz != null)
                    {
                        _quiz.ImagePath = updatedQuiz.ImagePath; // Get the actual path from the database
                    }
                }
                else
                {
                    await ShowAlertAsync($"Failed to upload quiz image: {result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await ShowAlertAsync($"Failed to upload quiz image: {ex.Message}");
            }
            finally
            {
                AppState.HideLoader();
                _imageUploadProgress = 0;
                _selectedImageFile = null;
            }
        }

        // Handle question images upload after the quiz is saved
        if (_quiz.Id != Guid.Empty)
        {
            AppState.ShowLoader("Uploading question images...");
            try
            {
                // Reload the quiz to get the actual question IDs after saving
                var updatedQuiz = await QuizApi.GetQuizToEditAsync(_quiz.Id);
                if (updatedQuiz != null)
                {
                    foreach (var question in updatedQuiz.Questions)
                    {
                        // Find the corresponding question in the original list to get its image file
                        var originalQuestion = _quiz.Questions.FirstOrDefault(q => 
                            q.Text == question.Text && 
                            (q.Id == question.Id || q.Id == 0) // Match by ID if available, or by text if it's new
                        );
                        
                        if (originalQuestion != null && _questionImageFiles.ContainsKey(originalQuestion) && _questionImageFiles[originalQuestion] != null)
                        {
                            var questionImageFile = _questionImageFiles[originalQuestion];
                            
                            // Upload the image for this question if there's an image file
                            if (questionImageFile != null)
                            {
                                var result = await QuestionImageService.UploadQuestionImageAsync(question.Id, questionImageFile);
                                if (!result.IsSuccess)
                                {
                                    await ShowAlertAsync($"Failed to upload image for question '{question.Text}': {result.ErrorMessage}");
                                }
                            }
                        }
                    }
                    
                    // Now reload the quiz again to get the updated image paths
                    var quizWithImages = await QuizApi.GetQuizToEditAsync(_quiz.Id);
                    if (quizWithImages != null)
                    {
                        // Update the current quiz with the image paths
                        foreach (var question in _quiz.Questions)
                        {
                            var updatedQuestion = quizWithImages.Questions.FirstOrDefault(q => q.Id == question.Id);
                            if (updatedQuestion != null)
                            {
                                question.ImagePath = updatedQuestion.ImagePath;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                await ShowAlertAsync($"Failed to upload question images: {ex.Message}");
            }
            finally
            {
                AppState.HideLoader();
            }
        }

        NavigationManager.NavigateTo("/teacher/manage-quizzes");
    }

    private async Task ShowAlertAsync(string message, string title = "Error") => 
        await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
    
    private async Task<bool> ShowConfirmAsync(string message) => 
        await JsRuntime.InvokeAsync<bool>("confirm", message);
    
    private async Task DeleteQuestionAsync(QuestionDto question)
    {
        bool confirmed = await ShowConfirmAsync("Are you sure you want to delete this question?");
        if (confirmed)
        {
            _quiz.Questions.Remove(question);
            // Update TotalQuestions to reflect the actual count
            _quiz.TotalQuestions = _quiz.Questions.Count;
        }
    }

    private async Task RemoveImageAsync()
    {
        if (_quiz.Id == Guid.Empty || string.IsNullOrEmpty(_quiz.ImagePath)) return;

        var result = await QuizImageService.RemoveQuizImageAsync(_quiz.Id);
        if (result.IsSuccess)
        {
            _quiz.ImagePath = null;
        }
    }

    // Dictionary to keep track of image files for each question
    private Dictionary<QuestionDto, IBrowserFile?> _questionImageFiles = new Dictionary<QuestionDto, IBrowserFile?>();

    private IBrowserFile? GetQuestionImageFile(QuestionDto question)
    {
        if (!_questionImageFiles.ContainsKey(question))
        {
            _questionImageFiles[question] = null;
        }
        return _questionImageFiles[question];
    }

    private async Task OnQuestionImageFileChanged(QuestionDto question, IBrowserFile? file)
    {
        _questionImageFiles[question] = file;
        StateHasChanged();
    }

    private async Task RemoveQuestionImageAsync(QuestionDto question)
    {
        if (question.Id == 0 || string.IsNullOrEmpty(question.ImagePath)) return;

        var result = await QuestionImageService.RemoveQuestionImageAsync(question.Id);
        if (result.IsSuccess)
        {
            question.ImagePath = null;
        }
    }

    private async Task OnImageFileChanged(IBrowserFile? file)
    {
        _selectedImageFile = file;
        StateHasChanged();
    }
    
    private void OnQuestionTypeChanged(QuestionDto question)
    {
        // When changing question type, ensure proper initialization
        if (question.IsTextAnswer)
        {
            // Clear options when switching to text answer
            question.Options.Clear();
        }
        else
        {
            // Initialize with at least 2 options when switching back to multiple choice
            if (question.Options.Count == 0)
            {
                question.Options.Add(new OptionDto());
                question.Options.Add(new OptionDto());
            }
        }
        StateHasChanged();
    }
    
    private void AddOptionToQuestion(QuestionDto question)
    {
        question.Options.Add(new OptionDto());
        StateHasChanged();
    }
    
}