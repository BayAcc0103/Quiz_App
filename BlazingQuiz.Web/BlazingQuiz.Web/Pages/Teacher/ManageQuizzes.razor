@page "/teacher/manage-quizzes"

@using BlazingQuiz.Shared
@using BlazingQuiz.Shared.Components.Components
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = nameof(UserRole.Teacher))]

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IAppState AppState
@inject QuizImageService QuizImageService

<BackButton />

<div class="container">
    <h1>Manage Quizzes</h1>
    <hr/>
    <div class="row">
        <div class="col-sm-3 ms-auto">
            <label class="form-label">Select Category</label>
            <select class="form-control" @bind="_selectedCategory" @bind:after="OnSelectedCategoryChanged">
                <option value="0">Select Category</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <div class="row">
            <table class="table table-striped table-hover">
                <thead>
                   <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Number of Questions</th>
                        <th>Time (in minutes)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if(_filteredQuizes.Length == 0)
                    {
                        <tr>
                            <td colspan="6" class="text-danger">No quizzes found</td>
                        </tr>
                    }
                    else
                    {
                        @foreach(var q in _filteredQuizes)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(q.ImagePath))
                                    {
                                        <img src="@QuizImageService.GetImageUrl(q.ImagePath)" alt="Quiz Image" class="img-thumbnail" style="max-width: 50px; max-height: 50px;" />
                                    }
                                </td>
                                <td>@q.Name</td>
                                <td>@q.CategoryName</td>
                                <td>@q.TotalQuestions questions</td>
                                <td>@q.TimeInMinutes minutes</td>
                                <td>
                                    <div class="d-flex justify-content-around">
                                        <button type="button" class="btn btn-sm btn-info" @onclick="() => ViewQuestionsAsync(q)">View Questions</button>
                                        <a href="teacher/edit-quiz/@q.Id" type="button" class="btn btn-sm btn-primary">Edit</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (_showQuestionsModal)
{
    <Modal Title="Questions" 
           Size="ModalSize.ExtraLarge"
           ActionButtonText="Ok" 
           OnActionButtonClick="() => _showQuestionsModal = false"
           OnCancelClick="() => _showQuestionsModal = false">
           @foreach(var q in _viewQuestions)
           {
           <div class="mb-2 shadow p-2">
                @q.Text
           </div>
           }
    </Modal>
}

@code {
    private QuizListDto[] _quizes = [];
    private QuizListDto[] _filteredQuizes = [];

    private CategoryDto[] _categories = [];
    private int _selectedCategory;

    private QuestionDto[] _viewQuestions = [];
    private bool _showQuestionsModal;

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Loading quizzes and categories");
        try
        {
            var quizesTask = QuizApi.GetQuizesAsync();
            _categories = await CategoryApi.GetCategoriesAsync();
            _quizes = await quizesTask;
            _filteredQuizes = _quizes;
        }
        catch (Exception ex)
        {
            AppState.ShowError(ex.Message);
        }
        finally
        {
            AppState.HideLoader();
        }
    }
    private void OnSelectedCategoryChanged()
    {
        if(_selectedCategory == 0)
            _filteredQuizes = _quizes;
        else
            _filteredQuizes = _quizes.Where(q => q.CategoryId == _selectedCategory).ToArray();
    }
    private async Task ViewQuestionsAsync(QuizListDto q)
    {
        //Fetch the questions from the API
        AppState.ShowLoader("Loading questions...");
        _viewQuestions = await QuizApi.GetQuizQuestionsAsync(q.Id);
        AppState.HideLoader();

        _showQuestionsModal = true;
    }
}