@page "/teacher/manage-questions"
@using BlazingQuiz.Shared
@using BlazingQuiz.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = nameof(UserRole.Teacher))]

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject NavigationManager NavigationManager
@inject IAppState AppState

<h3>Manage Questions</h3>

<div class="container">
    <div class="row mb-3">
        <div class="col-sm-4">
            <label class="form-label">Select Quiz</label>
            <select class="form-control" @bind="_selectedQuizId" @bind:after="OnSelectedQuizChanged">
                <option value="">Select a Quiz</option>
                @foreach (var quiz in _quizzes)
                {
                    <option value="@quiz.Id">@quiz.Name</option>
                }
            </select>
        </div>
    </div>
    
    @if (_questions.Any())
    {
        <div class="row">
            <div class="col-12">
                <h5>Questions for selected quiz:</h5>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Question</th>
                            <th>Answer Explanation</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var question in _questions)
                        {
                            <tr>
                                <td>@question.Text</td>
                                <td>@question.AnswerExplanation</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => EditQuestion(question.Id)">Edit</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(_selectedQuizId))
    {
        <div class="alert alert-info">No questions found for the selected quiz.</div>
    }
</div>

@code {
    private string? _selectedQuizId;
    private QuizListDto[] _quizzes = [];
    private QuestionDto[] _questions = [];

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Loading quizzes...");
        try
        {
            _quizzes = await QuizApi.GetQuizesAsync();
        }
        catch (Exception ex)
        {
            AppState.ShowError($"Failed to load quizzes: {ex.Message}");
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task OnSelectedQuizChanged()
    {
        if (!string.IsNullOrEmpty(_selectedQuizId))
        {
            AppState.ShowLoader("Loading questions...");
            try
            {
                _questions = await QuizApi.GetQuizQuestionsAsync(Guid.Parse(_selectedQuizId));
            }
            catch (Exception ex)
            {
                AppState.ShowError($"Failed to load questions: {ex.Message}");
                _questions = [];
            }
            finally
            {
                AppState.HideLoader();
            }
        }
        else
        {
            _questions = [];
        }
    }

    private void EditQuestion(int questionId)
    {
        // Since we can't edit individual questions directly, we'll navigate to edit the whole quiz
        var quiz = _quizzes.FirstOrDefault(q => q.Id == Guid.Parse(_selectedQuizId ?? string.Empty));
        if (quiz != null)
        {
            NavigationManager.NavigateTo($"/teacher/edit-quiz/{quiz.Id}");
        }
    }
}
