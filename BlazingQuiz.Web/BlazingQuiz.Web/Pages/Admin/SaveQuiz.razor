@page "/admin/add-quiz"
@page "/admin/edit-quiz/{quizId:guid?}"

@inject NavigationManager NavigationManager
@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi
@inject IJSRuntime JsRuntime

<h1>@(IsEditCase ? "Update Quiz" : "Add a Quiz")</h1>
<hr/>

<EditForm Model="_quiz" OnValidSubmit="SaveQuizAsync">
<DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="0">Select a category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value="_quiz.Name" class="form-control"></InputText>
                <ValidationMessage For="() => _quiz.Name" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputNumber @bind-Value="_quiz.TotalQuestions" class="form-control"></InputNumber>
                <ValidationMessage For="() => _quiz.TotalQuestions" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (in minutes)</label>
                <InputNumber @bind-Value="_quiz.TimeInMinutes" class="form-control"></InputNumber>
                <ValidationMessage For="() => _quiz.TimeInMinutes" />
            </div>
        </div>

        <hr/>
        <h4 class="">Questions</h4>

        <ol>
            @foreach(var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                <li class="shadow p-3 mb-3">
                    <textarea @bind="q.Text" class="form-control" row="3"></textarea>
                    <h6>Options</h6>
                    <ol>
                        @foreach (var o in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="radio" name="option_radio_@random" checked="@o.IsCorrect" @onchange="() => SetOptionAsCorrectAnswer(q, o)">
                                    </div>
                                    <input type="text" class="form-control" aria-label="Text input with checkbox" @bind="o.Text"/>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => q.Options.Remove(o)">X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">+ Add Option</button>
                    </div>            
                </li>
            }
        </ol>
        <div class="mt-3 d-flex justify-content-center">
            <button type="button" class="btn btn-info" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">+ Add Question </button>
        </div>

        <div class="col-sm-4">
            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
                    <label class="form-check-label" for="quizIsActive">Is Active?</label>

                </div>
            </div>
        </div>

        <hr/>
        <button type="submit" class="btn btn-success">Save Quiz</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public Guid? QuizId { get; set; }

    private bool IsEditCase => QuizId.HasValue && QuizId.Value != Guid.Empty;

    private QuizSaveDto _quiz = new();

    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        if (IsEditCase)
        {
            //Fetch _quiz from API
            var quiz = await QuizApi.GetQuizToEditAsync(QuizId!.Value);
            if (quiz == null)
            {
                await ShowAlertAsync("Quiz not found.");
                NavigationManager.NavigateTo("/admin/manage-quizes");
                return;
            }
            _quiz = quiz;
        }
        else
        {
            var question = GetDefaultEmptyQuestion();
            _quiz.Questions = [question];
        }
        _categories = await CategoryApi.GetCategoriesAsync();
    }

    protected override void OnParametersSet()
    {
        if(!QuizId.HasValue && _quiz.Id != Guid.Empty)
        {
            //We are in EditMode, and we clicked on Add new Quiz on the left nav menu
            _quiz = new();
            _quiz.Questions = [GetDefaultEmptyQuestion()];
        }
    }

    private QuestionDto GetDefaultEmptyQuestion() =>  new QuestionDto
        {
            Options = [new(), new()]
        };

    private void SetOptionAsCorrectAnswer(QuestionDto q, OptionDto o)
    {
        foreach (var option in q.Options)
        {
            option.IsCorrect = false;
        }
        o.IsCorrect = true;
    }
    private async Task SaveQuizAsync()
    {
        var errorMessage = _quiz.Validate();
        if (!string.IsNullOrEmpty(errorMessage))
        {
            await ShowAlertAsync(errorMessage);
            return;
        }
        var response = await QuizApi.SaveQuizAsync(_quiz);
        if (!response.IsSuccess)
        {
            await ShowAlertAsync(response.ErrorMessage);
            return;
        }
        NavigationManager.NavigateTo("/admin/manage-quizes");
        // if (_quiz.TotalQuestions != _quiz.Questions.Count)
        // {
        //     await ShowAlertAsync("Total Questions must be equal to the number of questions added.");
        //     return;
        // }
        // if(_quiz.Questions.Any(q => string.IsNullOrWhiteSpace(q.Text)))
        // {
        //     await ShowAlertAsync("Question text is required.");
        //     return;
        // }
        // if (_quiz.Questions.Any(q => q.Options.Count == 0))
        // {
        //     await ShowAlertAsync("Option are required for questions.");
        //     return;
        // }
    }
    private async Task ShowAlertAsync(string message, string title = "Error") => 
        await JsRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
        
}
