@page "/admin/add-quiz"

@inject IQuizApi QuizApi
@inject ICategoryApi CategoryApi

<h1>Add a Quiz</h1>
<hr/>

<EditForm Model="_quiz">
<DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_quiz.CategoryId" class="form-control">
                    <option value="0">Select a category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _quiz.CategoryId" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputSelect @bind-Value="_quiz.Name" class="form-control"></InputSelect>
                <ValidationMessage For="() => _quiz.Name" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Total Questions</label>
                <InputSelect @bind-Value="_quiz.TotalQuestions" class="form-control"></InputSelect>
                <ValidationMessage For="() => _quiz.TotalQuestions" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="mb-3">
                <label class="form-label">Time (in minutes)</label>
                <InputSelect @bind-Value="_quiz.TimeInMinutes" class="form-control"></InputSelect>
                <ValidationMessage For="() => _quiz.TimeInMinutes" />
            </div>
        </div>

        <hr/>
        <h4 class="">Questions</h4>

        <ol>
            @foreach(var q in _quiz.Questions)
            {
                var random = Guid.NewGuid();
                <li class="shadow p-3 mb-3">
                    <textarea @bind="q.Text" class="form-control" row="3"></textarea>
                    <h6>Options</h6>
                    <ol>
                        @foreach (var o in q.Options)
                        {
                            <li class="p-2 mb-2">
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="radio" name="option_radio_@random" checked="@o.IsCorrect" @onchange="() => SetOptionAsCorrectAnswer(q, o)">
                                    </div>
                                    <input type="text" class="form-control" aria-label="Text input with checkbox" @bind="o.Text"/>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => q.Options.Remove(o)">X</button>
                                </div>
                            </li>
                        }
                    </ol>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-sm btn-info" @onclick="() => q.Options.Add(new())">+ Add Option</button>
                    </div>            
                </li>
            }
        </ol>
        <div class="mt-3 d-flex justify-content-center">
            <button type="button" class="btn btn-info" @onclick="() => _quiz.Questions.Add(GetDefaultEmptyQuestion())">+ Add Question </button>
        </div>

        <div class="col-sm-4">
            <div class="mb-3">
                <div class="form-check form-switch">
                    <InputCheckbox @bind-Value="_quiz.IsActive" class="form-check-input" type="checkbox" role="switch" id="quizIsActive" />
                    <label class="form-check-label" for="quizIsActive">Is Active?</label>

                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {
    private QuizSaveDto _quiz = new();

    private CategoryDto[] _categories = [];

    protected override async Task OnInitializedAsync()
    {
        var question = GetDefaultEmptyQuestion();
        _quiz.Questions = [question];
        _categories = await CategoryApi.GetCategoriesAsync();
    }
    private QuestionDto GetDefaultEmptyQuestion() =>  new QuestionDto
        {
            Options = [new(), new()]
        };
    
    private void SetOptionAsCorrectAnswer(QuestionDto q, OptionDto o)
    {
        foreach (var option in q.Options)
        {
            option.IsCorrect = false;
        }
        o.IsCorrect = true;
    }
}
