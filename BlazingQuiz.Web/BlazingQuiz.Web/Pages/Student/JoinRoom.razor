@page "/student/joinroom"
@using BlazingQuiz.Shared.DTOs
@using BlazingQuiz.Web.Apis
@using BlazingQuiz.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = nameof(UserRole.Student))]
@inject IRoomApi RoomApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Join Room</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="joinRoomDto" OnValidSubmit="HandleJoinRoom">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="roomCode" class="form-label">Room Code *</label>
                            <InputText id="roomCode" class="form-control form-control-lg text-center" @bind-Value="joinRoomDto.Code" maxlength="6" style="font-size: 2rem; letter-spacing: 0.5rem;" />
                            <ValidationMessage For="@(() => joinRoomDto.Code)" class="text-danger" />
                            <div class="form-text">Enter the 6-digit room code provided by your teacher or peer</div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isJoining">
                                @if (isJoining)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Joining...</span>
                                }
                                else
                                {
                                    <i class="bi bi-door-open me-2">Join Room</i>

                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private JoinRoomDto joinRoomDto = new();
    private bool isJoining = false;

    private async Task HandleJoinRoom()
    {
        isJoining = true;
        StateHasChanged();
        
        try
        {
            var room = await RoomApi.JoinRoomAsync(joinRoomDto);
            // Navigate to room page
            Navigation.NavigateTo($"/student/room/{room.Id}");
        }
        catch (Exception ex)
        {
            await ShowAlertAsync($"Failed to join room: {ex.Message}", "Error");
        }
        finally
        {
            isJoining = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/student/home");
    }

    private async Task ShowAlertAsync(string message, string title = "Error") => 
        await JSRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");
}