@page "/student/quiz"

@layout QuizPageLayout 
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject IStudentQuizApi StudentQuizApi
@inject IAppState AppState
@inject QuestionImageService QuestionImageService
@inject QuizAudioService QuizAudioService
@inject QuestionAudioService QuestionAudioService

@*QuizInfo*@
@*Timer*@
@*Question*@
@*Option*@
@*NextButton(SubmitTest)*@
@*ExitTestButton  *@

@if(QuizState.Quiz != null)
{
<div class="row mb-3">
    @*Timer*@
    <div class="col-sm-12">
        <div class="my-1 d-flex justify-content-between align-items-center">
            <h6>@_questions.Count of @QuizState.Quiz.TotalQuestions</h6>
            <div class="d-flex gap-2">
                <div>
                    <QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync" />
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(QuizState.Quiz.AudioPath))
        {
            <div class="quiz-audio-container my-3">
                @if (QuizState.Quiz.AudioPath.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase))
                {
                    <audio controls class="w-100">
                        <source src="@QuizAudioService.GetAudioUrl(QuizState.Quiz.AudioPath)" type="audio/mpeg" />
                        Your browser does not support the audio element.
                    </audio>
                }
                else
                {
                    <div class="alert alert-info">Quiz audio file available: @QuizState.Quiz.AudioPath</div>
                }
            </div>
        }
        <h4 class="mt-3 mb-0 fw-bold">@_question.Text</h4>
        @if (!string.IsNullOrEmpty(_question.ImagePath))
        {
            <div class="question-image-container my-3">
                <img src="@QuestionImageService.GetImageUrl(_question.ImagePath)" alt="Question Image" class="img-fluid rounded" style="max-width: 100%; max-height: 300px; object-fit: contain;" />
            </div>
        }
        @if (!string.IsNullOrEmpty(_question.AudioPath))
        {
            <div class="question-audio-container my-3">
                @if (_question.AudioPath.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase))
                {
                    <audio controls class="w-100">
                        <source src="@QuestionAudioService.GetAudioUrl(_question.AudioPath)" type="audio/mpeg" />
                        Your browser does not support the audio element.
                    </audio>
                }
                else
                {
                    <div class="alert alert-info">Audio file available: @_question.AudioPath</div>
                }
            </div>
        }
        <hr/>
        @if (!_question.IsTextAnswer)
        {
            <!-- Multiple Choice Options -->
            @foreach (var o in _question.Options)
            {
                <div class="d-flex gap-2 p-3 mb-3 bg-white option-box" @onclick="() => _selectedOptionId = o.Id">
                    <input type="radio" name="rdo_@_question.Id" id="rdo_@o.Id" class="" 
                    checked="@(_selectedOptionId == o.Id)" 
                    @onchange="() => _selectedOptionId = o.Id"/>
                    <label for="rdo_@o.Id" class="d-block">@o.Text</label>
                </div>
            }
        }
        else
        {
            <!-- Text Input Field -->
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Enter your answer" @bind="_textAnswer" />
            </div>
        }
        @if (_errorMessage != null)
        {
            <div class="bg-danger my-3 p-2 d-flex justify-content-between align-items-center">
                <label class="text-white">@_errorMessage</label>
                <button type="button" class="btn btn-sm btn-light" @onclick="() => _errorMessage = null">X</button>
            </div>
        }
        <hr/>
        <div class="d-flex justify-content-between align-items-center">
            <button type="button" class="btn btn-danger" @onclick="() => _showExitQuizConfirmation = true">Exit Test</button>
            @if (!IsLastQuestion)
            {
                <button type="button" class="btn btn-primary" @onclick="SaveAndNextQuestionAsync">Save & Next</button>
            }
            else
            {
                <button type="button" class="btn btn-success" @onclick="SubmitQuizAsync">Submit Quiz</button>
            }
        </div>
    </div>
</div>
<style>
    .option-box {
        transition: all ease 0.2s;
    }
    .option-box:hover {
        border-radius: 10px;
        box-shadow: 0 0 18px 1px #bebebe;
    }
    
    .emotion-icon {
        transition: all ease 0.3s;
        border-radius: 50%;
        padding: 10px;
        position: relative;
    }
    
    .emotion-icon.selected {
        color: #0d6efd !important;
        -webkit-animation: pulse 2s infinite;
        animation: pulse 2s infinite;
        background-color: rgba(13, 110, 253, 0.1);
        box-shadow: 0 0 10px rgba(13, 110, 253, 0.5);
    }
    
    @@keyframes pulse {
        0% { 
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
        }
        50% { 
            box-shadow: 0 0 20px rgba(13, 110, 253, 0.8);
        }
        100% { 
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
        }
    }
    
    .emotion-icon:hover {
        transform: scale(1.2);
        background-color: #f0f8ff;
    }
</style>
}

@if (_showQuizTypeModal)
{
    <Modal Title="Select Quiz Type" OnActionButtonClick="() => _showQuizTypeModal = false" OnCancelClick="() => _showQuizTypeModal = false" ActionButtonText="Close">
        <div class="quiz-type-selection">
            <div class="d-grid gap-3">
                <button class="btn btn-lg btn-outline-primary p-3" @onclick="NavigateToMcqQuiz">
                    <h5><i class="bi bi-list-check me-2"></i>Multiple Choice Questions</h5>
                    <p class="mb-0">Answer questions with options, save and go to next, or submit the quiz when complete.</p>
                </button>
                <button class="btn btn-lg btn-outline-success p-3" @onclick="NavigateToFlashcardQuiz">
                    <h5><i class="bi bi-card-text me-2"></i>Flashcards</h5>
                    <p class="mb-0">Review questions and answers by flipping cards. Navigate through questions at your own pace.</p>
                </button>
            </div>
        </div>
    </Modal>
}



@if (_showExitQuizConfirmation)
{
    <Modal Title="Exit Quiz?" OnActionButtonClick="ExitQuizAsync"
           ActionButtonText="Yes"
           OnCancelClick="() => _showExitQuizConfirmation = false">
        <h5 class="text-danger">Do you realy want to exit the quiz</h5>
    </Modal>
}

@if (_showSuccessMessage)
{
    <Modal Title="Quiz Submitted" OnActionButtonClick="ShowRatingModal" OnCancelClick="ShowRatingModal" ActionButtonText="OK">
        <p class="text-success h5">Quiz submitted successfully</p>
    </Modal>
}

<RatingModal @ref="ratingModalRef" IsVisible="_showRatingModal" OnRatingSubmitted="HandleRatingSubmitted" IsVisibleChanged="OnRatingModalVisibilityChanged" />

@code {
    private QuestionDto _question = new();
    private int _selectedOptionId;
    private string? _textAnswer;
    private List<QuestionDto> _questions = [];
    private bool IsLastQuestion => _questions.Count == QuizState.Quiz.TotalQuestions;
    private string? _errorMessage;
    private string? _submitQuizMessage;
    private bool _showExitQuizConfirmation;
    private bool _showQuizTypeModal = false;
    private bool _showRatingModal = false;
    private bool _showSuccessMessage = false;
    private int _ratingScore = 0;
    private string? _commentContent;
    private RatingModal? ratingModalRef;

    protected override async Task OnInitializedAsync()
    {
        if(QuizState.Quiz == null || QuizState.StudentQuizId == 0)
        {
            NavigationManager.NavigateTo("student/home", replace: true);
            return;
        }
        await LoadNextQuestionAsync();
    }
    private async Task SaveAndNextQuestionAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
            await LoadNextQuestionAsync();
    }

    private async Task SubmitQuizAsync()
    {
        var isResponseSaved = await SaveQuestionResponseAsync();
        if (isResponseSaved)
        {
            AppState.ShowLoader("Sumitting the quiz");
            try
            {
                QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
                if(!result.IsSuccess)
                {
                    //Show error alert
                    _errorMessage = result.ErrorMessage;
                    return;
                }
                // Show success message
                _showSuccessMessage = true;
            }
            catch (Exception ex)
            {
                //Show error alert
                _errorMessage = ex.Message;
                return;
            }
            finally
            {
                AppState.HideLoader();
            }
        }
    }

    private async Task ExitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Exiting the quiz");
            QuizApiResponse result = await StudentQuizApi.ExitQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            RedirectToMyQuizes();
        }
        catch (Exception ex)
        {
            //Show error alert
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task<bool> SaveQuestionResponseAsync()
    {
        _errorMessage = null;
        
        if (_question.IsTextAnswer)
        {
            // For text answer questions, validate that an answer was provided
            if (string.IsNullOrWhiteSpace(_textAnswer))
            {
                _errorMessage = "Please enter an answer";
                return false;
            }
            
            AppState.ShowLoader("Saving your response...");
            try
            {
                StudentQuizQuestionResponseDto dto = new(QuizState.StudentQuizId, _question.Id, 0, _textAnswer); // Pass 0 for optionId and actual text answer
                QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(QuizState.StudentQuizId, dto);
                if (!result.IsSuccess)
                {
                    //Show error alert
                    _errorMessage = result.ErrorMessage;
                    return false;
                }
                _textAnswer = null; // Clear the answer after saving
                return true;
            }
            catch (Exception ex)
            {
                //Show error alert
                _errorMessage = ex.Message;
                return false;
            }
            finally
            {
                AppState.HideLoader();
            }
        }
        else
        {
            // For multiple choice questions, validate that an option was selected
            if (_selectedOptionId == 0)
            {
                //Show error alert
                _errorMessage = "Please select an option";
                return false;
            }

            AppState.ShowLoader("Saving your response...");
            try
            {
                StudentQuizQuestionResponseDto dto = new(QuizState.StudentQuizId, _question.Id, _selectedOptionId);
                QuizApiResponse result = await StudentQuizApi.SaveQuestionResponseAsync(QuizState.StudentQuizId, dto);
                if (!result.IsSuccess)
                {
                    //Show error alert
                    _errorMessage = result.ErrorMessage;
                    return false;
                }
                _selectedOptionId = 0;
                return true;
            }
            catch (Exception ex)
            {
                //Show error alert
                _errorMessage = ex.Message;
                return false;
            }
            finally
            {
                AppState.HideLoader();
            }
        }
    }

    private async Task LoadNextQuestionAsync()
    {
        AppState.ShowLoader("Loading question...");
        try
        {
            QuizApiResponse<QuestionDto?> result = await StudentQuizApi.GetNextQuestionForQuizAsync(QuizState.StudentQuizId);
            if (!result.IsSuccess || result.Data == null)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            _question = result.Data;
            _questions.Add(_question);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private void RedirectToMyQuizes()
    {
        QuizState.StopQuiz();
        NavigationManager.NavigateTo("student/my-quizes", replace: true);
    }
    
    private async Task NavigateToMcqQuiz()
    {
        _showQuizTypeModal = false;
        // Stay on the current page (MCQ format is the default)
        // Or if we need to reload the page, we could call NavigationManager.NavigateTo("/student/quiz", forceLoad: true)
    }
    
    private async Task NavigateToFlashcardQuiz()
    {
        _showQuizTypeModal = false;
        NavigationManager.NavigateTo("/student/flashcard-quiz");
    }
    
    private async Task AutoSubmitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Auto submitting the quiz");
            QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
            if(!result.IsSuccess)
            {
                //Show error alert
                _errorMessage = result.ErrorMessage;
                return;
            }
            // Show success message
            _showSuccessMessage = true;
        }
        catch (Exception ex)
        {
            //Show error alert
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }
    
    private string GetRatingText(int rating)
{
    return rating switch
    {
        1 => "Very Bad",
        2 => "Bad",
        3 => "Normal",
        4 => "Good",
        5 => "Very Good",
        _ => "" // Default case for any unexpected values
    };
}
    
    private string GetEmotionIcon(int rating)
    {
        return rating switch
        {
            1 => "😞",
            2 => "😟",
            3 => "😐",
            4 => "😄",  // Fun rating
            5 => "😁",  // Very Fun rating
            _ => "😐"   // Default case for any unexpected values
        };
    }
    
    private async Task SubmitRatingAndCommentAsync()
    {
        try
        {
            // Validate that a rating has been selected
            // if (_ratingScore <= 0 || _ratingScore > 5)
            // {
            //     _errorMessage = "Please select a rating before submitting.";
            //     return;
            // }

            AppState.ShowLoader("Submitting your rating and comment...");
            
            // Convert frontend rating text to backend rating text
            string backendRatingText = _ratingScore switch
            {
                1 => BlazingQuiz.Shared.Enums.RatingText.VeryBad,
                2 => BlazingQuiz.Shared.Enums.RatingText.Bad,
                3 => BlazingQuiz.Shared.Enums.RatingText.Normal,
                4 => BlazingQuiz.Shared.Enums.RatingText.Good,
                5 => BlazingQuiz.Shared.Enums.RatingText.VeryGood,
                _ => BlazingQuiz.Shared.Enums.RatingText.Normal // Default case for any unexpected values
            };
            
            var ratingDto = new QuizRatingCommentDto
            {
                StudentQuizId = QuizState.StudentQuizId,
                RatingScore = _ratingScore,
                RatingText = backendRatingText,
                CommentContent = _commentContent
            };
            
            var result = await StudentQuizApi.SaveRatingAndCommentAsync(QuizState.StudentQuizId, ratingDto);
            
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage ?? "Failed to submit rating and comment.";
                return;
            }
            
            // Close the rating modal and redirect to quiz result page after successful rating submission
            _showRatingModal = false;
            NavigationManager.NavigateTo($"student/quiz-result/{QuizState.StudentQuizId}", replace: true);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }
    
    private void CloseRatingModal()
    {
        _showRatingModal = false;
        NavigationManager.NavigateTo($"student/quiz-result/{QuizState.StudentQuizId}", replace: true);
    }
    
    private void ShowRatingModal()
    {
        _showSuccessMessage = false;
        _showRatingModal = true;
        _ratingScore = 0; // Always reset rating when showing the modal
    }
    private void SelectRating(int rating)
    {
        // Only allow ratings from 1 to 5
        if (rating >= 1 && rating <= 5)
        {
            _ratingScore = rating;
            _errorMessage = null;
        }
        StateHasChanged(); // Force UI update to reflect the selection
    }
    
    private async Task HandleRatingSubmitted((string rating, string comment) ratingData)
    {
        try
        {
            // Validate that a rating has been selected
            if (string.IsNullOrEmpty(ratingData.rating))
            {
                _errorMessage = "Please select a rating before submitting.";
                return;
            }

            AppState.ShowLoader("Submitting your rating and comment...");
            
            // Convert frontend rating text to backend rating text
            string backendRatingText = ConvertToFrontendRatingToBackendText(ratingData.rating);
            
            var ratingDto = new QuizRatingCommentDto
            {
                StudentQuizId = QuizState.StudentQuizId,
                RatingScore = ConvertFrontendRatingToScore(ratingData.rating), // Convert text to score for compatibility
                RatingText = backendRatingText,
                CommentContent = ratingData.comment
            };
            
            var result = await StudentQuizApi.SaveRatingAndCommentAsync(QuizState.StudentQuizId, ratingDto);
            
            if (!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage ?? "Failed to submit rating and comment.";
                return;
            }
            
            // Close the rating modal and redirect to quiz result page after successful rating submission
            _showRatingModal = false;
            NavigationManager.NavigateTo($"student/quiz-result/{QuizState.StudentQuizId}", replace: true);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }
    
    private string ConvertToFrontendRatingToBackendText(string frontendRating)
    {
        return frontendRating.ToLower() switch
        {
            "very bad" => BlazingQuiz.Shared.Enums.RatingText.VeryBad,
            "bad" => BlazingQuiz.Shared.Enums.RatingText.Bad,
            "normal" => BlazingQuiz.Shared.Enums.RatingText.Normal,
            "fun" => BlazingQuiz.Shared.Enums.RatingText.Good, // Map "fun" to "good"
            "very fun" => BlazingQuiz.Shared.Enums.RatingText.VeryGood, // Map "very fun" to "very good"
            _ => BlazingQuiz.Shared.Enums.RatingText.Normal // Default case for any unexpected values
        };
    }
    
    private int ConvertFrontendRatingToScore(string frontendRating)
    {
        return frontendRating.ToLower() switch
        {
            "very bad" => 1,
            "bad" => 2,
            "normal" => 3,
            "fun" => 4, // Map "fun" to score 4
            "very fun" => 5, // Map "very fun" to score 5
            _ => 3 // Default to normal (score 3) for any unexpected values
        };
    }
    
    private async Task OnRatingModalVisibilityChanged(bool visible)
    {
        _showRatingModal = visible;
        if (!visible && !_showSuccessMessage) // If modal is closed without submitting, navigate to results
        {
            NavigationManager.NavigateTo($"student/quiz-result/{QuizState.StudentQuizId}", replace: true);
        }
    }
}
