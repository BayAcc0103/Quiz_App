@page "/student/home"

@using BlazingQuiz.Shared
@inject IAppState AppState  
@inject ICategoryApi CategoryApi
@inject IStudentQuizApi StudentQuizApi
@inject IBookmarkApi BookmarkApi
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject QuizImageService QuizImageService
@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row">
        <div class="col-sm-3 ms-auto">
            <label class="form-label">Select Category</label>
            <select class="form-control" @bind="_selectedCategoryId" @bind:after="OnSelectedCategoryChanged">
                <option value="0">Select Category</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        @if(!_isLoading && _quizes.Length == 0)
        {
            var message = _selectedCategoryId == 0 ? "Select a category to view quizes." : "No quizes available for this category.";
            <div class="col-sm-12 text-center">
                <h5 class="text-danger">@message</h5>
            </div>
        }
        else
        {
            @foreach (var q in _quizes)
            {
                <div class="col-sm-4">
                    <div class="box bg-white p-3">
                        <h5 class="fw-bold">@q.Name</h5>
                        @if (!string.IsNullOrEmpty(q.ImagePath))
                        {
                            <div class="text-center my-3">
                                <img src="@QuizImageService.GetImageUrl(q.ImagePath)" alt="@q.Name" class="img-fluid rounded" style="max-height: 150px; object-fit: cover;" />
                            </div>
                        }
                        <hr />
                        <table class="table">
                            <tr>
                                <td>
                                    <label class="fw-bold">Category</label>
                                </td>
                                <td>
                                    <span>@q.CategoryName</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label class="fw-bold">Number of Questions</label>
                                </td>
                                <td>
                                    <span>@q.TotalQuestions question(s)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label class="fw-bold">Total Time</label>
                                </td>
                                <td>
                                    <span>@q.TimeInMinutes minute(s)</span>
                                </td>
                            </tr>
                        </table>
                        <hr />
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-sm btn-warning" @onclick="() => _startingQuiz = q">Start Quiz</button>
                            <button type="button" class="btn btn-sm @(IsBookmarked(q.Id) ? "btn-success" : "btn-outline-success")" 
                                    @onclick="() => ToggleBookmarkAsync(q)" 
                                    title="@(IsBookmarked(q.Id) ? "Remove bookmark" : "Add to bookmarks")">
                                @(IsBookmarked(q.Id) ? "★" : "☆")
                            </button>
                        </div>
                    </div>
                </div>
            }
        }    
    </div>
</div>

@if(_startingQuiz != null)
{
    var title = $"Starting Quiz: {_startingQuiz.Name}?";
    <Modal Title="@title" OnCancelClick="() => _startingQuiz = null" OnActionButtonClick="StartQuizAsync">
        <p class="m-0 p-3">
            Are you sure you want to start the quiz?<br/>
            You will not able to pause the quiz
        </p>
    </Modal>
}

@code {
    private CategoryDto[] _categories = [];
    private QuizListDto[] _quizes = [];
    private int _selectedCategoryId;
    private bool _isLoading;
    private QuizListDto? _startingQuiz;
    private Dictionary<Guid, bool> _bookmarkedQuizes = new();

    protected override async Task OnInitializedAsync()
    {
        AppState.ShowLoader("Loading categories and quizes...");
        try
        {
            _isLoading = true;
            var categoriesTask = CategoryApi.GetCategoriesAsync();
            //Load/Fetch quizes
            _quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);
            _categories = await categoriesTask;
            
            // Load bookmark status for each quiz
            await LoadBookmarkStatusAsync();
        }
        catch (Exception ex)
        {
            throw;
        }
        finally
        {
            AppState.HideLoader();
            _isLoading = false;
        }
    }
    
    private async Task OnSelectedCategoryChanged()
    {
        AppState.ShowLoader("Loading quizes...");
        _quizes = await StudentQuizApi.GetActiveQuizesAsync(_selectedCategoryId);
        await LoadBookmarkStatusAsync();
        AppState.HideLoader();
    }

    private async Task StartQuizAsync()
    {
        AppState.ShowLoader("Preparing the quizes...");
        try
        {
            QuizApiResponse<int> response = await StudentQuizApi.StartQuizAsync(_startingQuiz.Id);
            if (!response.IsSuccess)
            {
                //Show error alert
                return;
            }
            int studentQuizId = response.Data;

            QuizState.StartQuiz(_startingQuiz, studentQuizId);
            NavigationManager.NavigateTo("student/quiz");
        }
        catch
        {
            throw;
        }
        finally
        {
            AppState.HideLoader();
        }
   
    }
    
    private async Task LoadBookmarkStatusAsync()
    {
        if (!QuizAuthStateProvider.IsLoggedIn)
        {
            return;
        }
        
        _bookmarkedQuizes.Clear();
        foreach (var quiz in _quizes)
        {
            var result = await BookmarkApi.IsBookmarkedAsync(QuizAuthStateProvider.User.Id, quiz.Id);
            if (result.IsSuccess)
            {
                _bookmarkedQuizes[quiz.Id] = result.Data;
            }
        }
    }
    
    private async Task ToggleBookmarkAsync(QuizListDto quiz)
    {
        if (!QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("auth/login");
            return;
        }

        var isBookmarked = _bookmarkedQuizes.ContainsKey(quiz.Id) && _bookmarkedQuizes[quiz.Id];
        
        if (isBookmarked)
        {
            // Remove bookmark
            var result = await BookmarkApi.RemoveBookmarkAsync(QuizAuthStateProvider.User.Id, quiz.Id);
            if (result.IsSuccess)
            {
                _bookmarkedQuizes[quiz.Id] = false;
            }
        }
        else
        {
            // Add bookmark
            var bookmarkDto = new QuizBookmarkDto
            {
                UserId = QuizAuthStateProvider.User.Id,
                QuizId = quiz.Id,
                QuizName = quiz.Name,
                CategoryName = quiz.CategoryName
            };
            
            var result = await BookmarkApi.AddBookmarkAsync(bookmarkDto);
            if (result.IsSuccess)
            {
                _bookmarkedQuizes[quiz.Id] = true;
            }
        }
    }
    
    private bool IsBookmarked(Guid quizId)
    {
        return _bookmarkedQuizes.ContainsKey(quizId) && _bookmarkedQuizes[quizId];
    }
}
