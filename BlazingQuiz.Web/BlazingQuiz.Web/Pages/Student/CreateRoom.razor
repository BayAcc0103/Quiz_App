@page "/student/createroom"
@using BlazingQuiz.Shared.DTOs
@using BlazingQuiz.Web.Apis
@using BlazingQuiz.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = nameof(UserRole.Student))]
@inject IRoomApi RoomApi
@inject IStudentQuizApi StudentQuizApi
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Create New Room</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="createRoomDto" OnValidSubmit="HandleCreateRoom">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="roomName" class="form-label">Room Name *</label>
                            <InputText id="roomName" class="form-control" @bind-Value="createRoomDto.Name" />
                            <ValidationMessage For="@(() => createRoomDto.Name)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="roomDescription" class="form-label">Description</label>
                            <InputTextArea id="roomDescription" class="form-control" @bind-Value="createRoomDto.Description" rows="3"></InputTextArea>
                            <ValidationMessage For="@(() => createRoomDto.Description)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Quiz</label>
                            <div class="input-group">
                                <input id="selectedQuiz" class="form-control" value="@SelectedQuizName" readonly placeholder="No quiz selected" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="OpenQuizSelectionModal">Choose Quiz</button>
                                @if (createRoomDto.QuizId.HasValue)
                                {
                                    <button type="button" class="btn btn-outline-danger" @onclick="ClearSelectedQuiz">Clear</button>
                                }
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="maxParticipants" class="form-label">Maximum Participants</label>
                            <InputNumber id="maxParticipants" class="form-control" @bind-Value="createRoomDto.MaxParticipants" min="1" max="1000" />
                            <ValidationMessage For="@(() => createRoomDto.MaxParticipants)" class="text-danger" />
                            <div class="form-text">Default: 50 participants</div>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreating"> 
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Creating</span>
                                }
                                else
                                {
                                    <span>Create Room</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                    
                    @if (createdRoom != null)
                    {
                        <div class="mt-4 p-3 bg-success bg-opacity-10 border border-success rounded">
                            <h5 class="text-success">Room Created Successfully!</h5>
                            <p><strong>Room Name:</strong> @createdRoom.Name</p>
                            <p><strong>Room Code:</strong> <span class="badge bg-primary fs-5">@createdRoom.Code</span></p>
                            @if (createdRoom.QuizName != null)
                            {
                                <p><strong>Quiz:</strong> @createdRoom.QuizName</p>
                            }
                            <p>Share this code with others to join the room.</p>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="CopyCode">Copy Code</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<QuizSelectionModal @ref="quizSelectionModal" IsVisible="@quizSelectionModalVisible" Quizzes="availableQuizzes" OnQuizSelected="OnQuizSelected" />

@code {
    private CreateRoomDto createRoomDto = new();
    private RoomDto? createdRoom;
    private bool isCreating = false;
    private QuizSelectionModal? quizSelectionModal;
    private bool quizSelectionModalVisible = false;
    private string SelectedQuizName = "No quiz selected";
    private List<QuizListDto> availableQuizzes = new();
    private Dictionary<Guid, string> quizNames = new();

    protected override async Task OnInitializedAsync()
    {
        createRoomDto.MaxParticipants = 50; // Default max participants
        
        // Load all available quizzes
        await LoadAvailableQuizzes();
        

    }

    private async Task HandleCreateRoom()
    {
        isCreating = true;
        StateHasChanged();
        
        try
        {
            createdRoom = await RoomApi.CreateRoomAsync(createRoomDto);
            await ShowAlertAsync("Room created successfully!", "Success");
        }
        catch (Exception ex)
        {
            await ShowAlertAsync($"Failed to create room: {ex.Message}", "Error");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/student");
    }

    private async Task CopyCode()
    {
        if (createdRoom != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", createdRoom.Code);
            await ShowAlertAsync("Room code copied to clipboard!", "Copied");
        }
    }

    private async Task ShowAlertAsync(string message, string title = "Error") => 
        await JSRuntime.InvokeVoidAsync("alert", $"{title}\n{message}");

    private async Task LoadAvailableQuizzes()
    {
        try
        {
            // Load all active quizzes for the student (similar to home page)
            availableQuizzes = (await StudentQuizApi.GetActiveQuizesAsync(0)).ToList(); // 0 means all categories
            quizNames = availableQuizzes.ToDictionary(q => q.Id, q => q.Name);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available quizzes: {ex.Message}");
        }
    }

    private void OpenQuizSelectionModal()
    {
        quizSelectionModalVisible = true;
        StateHasChanged();
    }

    private void ClearSelectedQuiz()
    {
        createRoomDto.QuizId = null;
        SelectedQuizName = "No quiz selected";
        StateHasChanged();
    }

    private async Task OnQuizSelected(Guid? quizId)
    {
        quizSelectionModalVisible = false;
        
        if (quizId.HasValue)
        {
            createRoomDto.QuizId = quizId;
            // Update the quiz name to display it
            if (quizNames.ContainsKey(quizId.Value))
            {
                SelectedQuizName = quizNames[quizId.Value];
            }
            else
            {
                // Fallback in case the selected quiz is not in our local cache
                SelectedQuizName = "Quiz selected";
            }
        }
        else
        {
            createRoomDto.QuizId = null;
            SelectedQuizName = "No quiz selected";
        }
        StateHasChanged();
    }
}

<QuizSelectionModal @ref="quizSelectionModal" IsVisible="@quizSelectionModalVisible" Quizzes="availableQuizzes" OnQuizSelected="OnQuizSelected" />