@page "/student/flashcard-quiz"
@using BlazingQuiz.Shared.DTOs
@using BlazingQuiz.Shared.Components.Components
@using BlazingQuiz.Web.Apis

@layout QuizPageLayout 
@inject NavigationManager NavigationManager
@inject QuizState QuizState
@inject BlazingQuiz.Web.Apis.IStudentQuizApi StudentQuizApi
@inject IAppState AppState

@if(QuizState.Quiz != null)
{
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="col-sm-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h6>Question @(_currentIndex + 1) of @_questions.Count</h6>
                    <div>
                        <QuizTimer TotalMinutes="QuizState.Quiz.TimeInMinutes" OnTimerStop="AutoSubmitQuizAsync" />
                    </div>
                </div>
                
                @if (_questions.Any())
                {
                    @if (_isPageReady)
                    {
                        <div class="flip-card-container">
                            <div class="flip-card @(IsFlipped ? "flipped" : "")" id="flip-card-@_currentIndex">
                                <div class="card-face card-front">
                                    <h5 class="card-question">@_currentQuestion.Text</h5>
                                    @if (!_currentQuestion.IsTextAnswer && _currentQuestion.Options.Any())
                                    {
                                        <div class="card-options mt-3">
                                            @foreach (var option in _currentQuestion.Options)
                                            {
                                                <div class="card-option">@option.Text</div>
                                            }
                                        </div>
                                    }
                                    <div class="card-hint flip-indicator">
                                        <i class="bi bi-arrow-repeat"></i> Click card or button to flip
                                    </div>
                                </div>
                                <div class="card-face card-back">
                                    <h5 class="card-question">Answer</h5>
                                    @if (_currentQuestion.IsTextAnswer)
                                    {
                                        <div class="card-answer mt-3">@_currentQuestion.TextAnswer</div>
                                    }
                                    else
                                    {
                                        <div class="card-options mt-3">
                                            @foreach (var option in _currentQuestion.Options.Where(o => o.IsCorrect))
                                            {
                                                <div class="card-option">@option.Text</div>
                                            }
                                        </div>
                                    }
                                    <div class="card-hint">
                                        <i class="bi bi-arrow-repeat"></i> Click to flip back
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    
                    <div class="flashcard-navigation mt-3">
                        <button class="flashcard-button flash-card-prev-btn" 
                                @onclick="PreviousQuestion" 
                                disabled="@(_currentIndex == 0)">
                            <i class="bi bi-arrow-left me-1"></i> Previous
                        </button>
                        
                        <button class="flashcard-button flash-card-flip-btn" 
                                @onclick="ToggleFlip">
                            <i class="bi bi-arrow-repeat me-1"></i> @_flipButtonText
                        </button>
                        
                        @if (_currentIndex == _questions.Count - 1)
                        {
                            <button class="flashcard-button flash-card-next-btn" 
                                    @onclick="SubmitQuizAsync">
                                Submit Quiz <i class="bi bi-check2-all ms-1"></i>
                            </button>
                        }
                        else
                        {
                            <button class="flashcard-button flash-card-next-btn" 
                                    @onclick="NextQuestion">
                                Next <i class="bi bi-arrow-right ms-1"></i>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center mt-5">
        <h3>No Quiz Selected</h3>
        <p>You must start a quiz first from the 'My Quizzes' page.</p>
        <div class="mt-4">
            <a href="/student/home" class="btn btn-primary me-2">Go to Home</a>
            <a href="/student/my-quizes" class="btn btn-secondary">My Quizzes</a>
        </div>
    </div>
}

@if (_submitQuizMessage != null)
{
    <Modal Title="Quiz Submitted" OnActionButtonClick="RedirectToMyQuizes" OnCancelClick="RedirectToMyQuizes">
        <p class="text-success h5">@_submitQuizMessage</p>
    </Modal>
}

<style>
    .container-fluid {
        padding: 20px;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
    }
    
    .flashcard-navigation {
        display: flex;
        justify-content: space-between;
        margin-top: 25px;
        width: 100%;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
        gap: 10px;
    }
    
    .flashcard-button {
        flex: 1;
        padding: 12px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        text-align: center;
        min-width: 100px;
    }
    
    .flashcard-button:hover:not(:disabled) {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    
    .flashcard-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }
    
    .flash-card-prev-btn {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white;
    }
    
    .flash-card-next-btn {
        background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
        color: white;
    }
    
    .flash-card-flip-btn {
        background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
        color: white;
    }
    
    .quiz-progress-container {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
    }
    
    .question-counter {
        font-weight: bold;
        color: #2d3436;
        font-size: 1.1rem;
    }
    
    .quiz-title {
        color: #2d3436;
        margin-bottom: 5px;
        font-weight: 600;
    }
    
    /* Enhanced flip card styling */
    .flip-card-container {
        perspective: 1500px;
        margin: 20px auto;
        width: 100%;
        max-width: 600px;
        height: 350px;
    }
    
    .flip-card {
        position: relative;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
        transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.25);
        border: 2px solid rgba(255,255,255,0.1);
    }
    
    .flip-card.flipped {
        transform: rotateY(180deg);
    }
    
    .card-face {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        border-radius: 13px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 25px;
        text-align: center;
        overflow: auto;
        -webkit-backface-visibility: hidden;
        -moz-backface-visibility: hidden;
    }
    
    .card-front {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    .card-back {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        transform: rotateY(180deg);
    }
    
    .card-question {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 20px;
        line-height: 1.4;
        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .card-options {
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
        max-height: 150px;
        overflow-y: auto;
        padding: 5px;
    }
    
    .card-option {
        padding: 14px;
        background-color: rgba(255, 255, 255, 0.25);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.3);
        text-align: left;
        font-size: 1rem;
    }
    
    .card-option:hover {
        background-color: rgba(255, 255, 255, 0.35);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .card-answer {
        font-size: 1.4rem;
        font-weight: 600;
        margin-top: 10px;
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.25);
        border-radius: 10px;
        text-align: center;
        width: 100%;
        line-height: 1.5;
    }
    
    .card-hint {
        font-size: 1rem;
        opacity: 0.8;
        margin-top: auto;
        display: flex;
        align-items: center;
        gap: 8px;
        background-color: rgba(0, 0, 0, 0.1);
        padding: 10px 20px;
        border-radius: 25px;
        margin-top: 20px;
    }
    
    .flip-indicator {
        animation: pulse 2s infinite;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    @@media (max-width: 768px) {
        .flashcard-navigation {
            flex-direction: column;
            gap: 12px;
        }
        
        .flashcard-button {
            width: 100%;
        }
        
        .flip-card-container {
            height: 300px;
        }
        
        .card-question {
            font-size: 1.2rem;
        }
        
        .card-option {
            font-size: 0.9rem;
            padding: 12px;
        }
        
        .card-answer {
            font-size: 1.2rem;
        }
    }
</style>

<script>
    // Custom JavaScript for enhanced flip card interactions
    window.quizHelpers = {
        // Function to add special effects when flipping cards
        addFlipEffect: function(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener('transitionend', function() {
                    console.log('Flip animation completed');
                });
            }
        },
        
        // Function to play sound effect on flip (if needed)
        playFlipSound: function() {
            // In a real implementation, you could play a sound here
        },
        
        // Function to add keyboard navigation support
        setupKeyboardNavigation: function() {
            document.addEventListener('keydown', function(event) {
                // Add keyboard support for navigation
                if (event.key === 'ArrowLeft') {
                    // Previous button action
                    document.querySelector('.flash-card-prev-btn')?.click();
                } else if (event.key === 'ArrowRight') {
                    // Next button action
                    document.querySelector('.flash-card-next-btn')?.click();
                } else if (event.key === ' ' || event.key === 'Enter') {
                    // Spacebar or Enter to flip card
                    event.preventDefault(); // Prevent page scroll
                    document.querySelector('.flash-card-flip-btn')?.click();
                }
            });
        },
        
        // Function to focus on the active flashcard for accessibility
        focusOnFlashcard: function(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                setTimeout(() => {
                    element.focus();
                    element.setAttribute('tabindex', '0');
                }, 100);
            }
        },
        
        // Function to initialize flip card behavior
        initializeFlipCard: function(cardId) {
            const card = document.getElementById(cardId);
            if (card) {
                // Add click event to flip the card
                card.addEventListener('click', function(e) {
                    // Only flip if clicked on the card itself, not on interactive elements
                    if (e.target === card || e.target.classList.contains('card-face') || 
                        e.target.classList.contains('card-front') || e.target.classList.contains('card-back')) {
                        // Trigger the flip button click
                        document.querySelector('.flash-card-flip-btn')?.click();
                    }
                });
            }
        }
    };
    
    // Initialize keyboard navigation when page loads
    window.quizHelpers.setupKeyboardNavigation();
    
    // Enhanced flip animation with 3D effect
    window.flipCard = function(cardId) {
        const card = document.getElementById(cardId);
        if (card) {
            card.classList.toggle('flipped');
        }
    };
    
    // Reset card to front position
    window.resetCard = function(cardId) {
        const card = document.getElementById(cardId);
        if (card && card.classList.contains('flipped')) {
            card.classList.remove('flipped');
        }
    };
</script>

@code {
    private List<QuestionDto> _questions = new();
    private QuestionDto _currentQuestion = new();
    private int _currentIndex = 0;
    private bool _isFlipped = false;
    private string _flipButtonText = "Flip Card";
    private string? _errorMessage;
    private string? _submitQuizMessage;
    private bool _isPageReady = false;

    protected override async Task OnInitializedAsync()
    {
        if(QuizState.Quiz == null || QuizState.StudentQuizId == 0)
        {
            NavigationManager.NavigateTo("student/home", replace: true);
            return;
        }
        
        AppState.ShowLoader("Loading questions...");
        try
        {
            // Load all questions for the quiz
            var allQuestionsResult = await StudentQuizApi.GetAllQuestionsForQuizAsync(QuizState.StudentQuizId);
            if (allQuestionsResult.IsSuccess && allQuestionsResult.Data != null)
            {
                _questions = allQuestionsResult.Data.ToList();
                if (_questions.Any())
                {
                    _currentQuestion = _questions[_currentIndex];
                }
                else
                {
                    _errorMessage = "No questions available for this quiz";
                }
            }
            else
            {
                _errorMessage = allQuestionsResult.ErrorMessage ?? "Failed to load questions";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait a brief moment to ensure CSS is loaded before showing the flashcard
            await Task.Delay(50);
            _isPageReady = true;
            StateHasChanged();
        }
    }
    
    private bool IsFlipped => _isFlipped;

    private async Task NextQuestion()
    {
        if (_currentIndex < _questions.Count - 1)
        {
            _currentIndex++;
            _currentQuestion = _questions[_currentIndex];
            _isFlipped = false; // Reset flip state when moving to next question
            _flipButtonText = "Flip Card";
        }
    }

    private async Task PreviousQuestion()
    {
        if (_currentIndex > 0)
        {
            _currentIndex--;
            _currentQuestion = _questions[_currentIndex];
            _isFlipped = false; // Reset flip state when moving to previous question
            _flipButtonText = "Flip Card";
        }
    }

    private async Task ToggleFlip()
    {
        _isFlipped = !_isFlipped;
        _flipButtonText = _isFlipped ? "Flip Back" : "Flip Card";
    }

    private async Task OnFlipChanged(bool isFlipped)
    {
        _isFlipped = isFlipped;
        _flipButtonText = _isFlipped ? "Flip Back" : "Flip Card";
    }

    private async Task OnCardFlipped()
    {
        // Optional: Add any additional logic when card is flipped
    }

    private async Task SubmitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Submitting quiz...");
            QuizApiResponse result = await StudentQuizApi.SubmitQuizAsync(QuizState.StudentQuizId);
            if(!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }
            
            _submitQuizMessage = "Quiz submitted successfully";
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private async Task AutoSubmitQuizAsync()
    {
        try
        {
            AppState.ShowLoader("Auto submitting the quiz");
            QuizApiResponse result = await StudentQuizApi.AutoSubmitQuizAsync(QuizState.StudentQuizId);
            if(!result.IsSuccess)
            {
                _errorMessage = result.ErrorMessage;
                return;
            }
            
            _submitQuizMessage = "Quiz submitted successfully";
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            AppState.HideLoader();
        }
    }

    private void RedirectToMyQuizes()
    {
        QuizState.StopQuiz();
        NavigationManager.NavigateTo("student/my-quizes", replace: true);
    }
}