@page "/auth/login"
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider
<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">
            <div class="mt-3">
                <h1 class="h3">Login | Blazing Quiz</h1>
            </div>

            <AuthorizeView>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
                <NotAuthorized>
                    <p>Not Authorized</p>
                </NotAuthorized>
                <Authorized>
                    <p>Authorized: @context.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Name)?.Value</p>
                </Authorized>
            </AuthorizeView>
            <hr />
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label for="email" class="form-label">Username: </label>
                    <InputText class="form-control" @bind-Value="_model.Username" />
                    <ValidationMessage For="() => _model.Username"/>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password: </label>
                    <InputText type="password" class="form-control" @bind-Value="_model.Password" />
                    <ValidationMessage For="() => _model.Password"/>
                </div>
                @if(_errorMessage != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_errorMessage</p>
                    </div>
                }
                <div class="mb-3">
                    @if (!_isBusy)
                    {
                        <button type="submit" class="btn btn-success">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Logging-in...</button> 
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDto _model = new();
    private bool _isBusy;
    private string? _errorMessage;
    private async Task LoginAsync()
    {
        _errorMessage = null;
        _isBusy = true;
        try
        {
            var authResponse = await AuthApi.LoginAsync(_model);
            if (authResponse.HasError)
            {
                _errorMessage = authResponse.ErrorMessage;
                return;
            }
            //Set the token in the local storage
            //Implement Auth State Provider
            var loggedInUser = authResponse.User;
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isBusy = false;
        }   
    }
}