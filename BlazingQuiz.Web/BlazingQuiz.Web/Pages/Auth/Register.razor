@page "/auth/register"
@using BlazingQuiz.Shared.Components.Components
@using BlazingQuiz.Web.Apis
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IAuthApi AuthApi
@inject QuizAuthStateProvider QuizAuthStateProvider
@inject IAppState AppState
<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto border shadow-lg">
            <div class="mt-3">
                <h1 class="h3">Register | Blazing Quiz</h1>
            </div>

@*             <AuthorizeView>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
                <NotAuthorized>
                    <p>Not Authorized</p>
                </NotAuthorized>
                <Authorized>
                    <p>Authorized: @context.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Name)?.Value</p>
                </Authorized>
            </AuthorizeView> *@
            <hr />
            <EditForm Model="_model" OnValidSubmit="RegisterAsync">
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label for="email" class="form-label">Name: </label>
                    <InputText class="form-control" @bind-Value="_model.Name" />
                    <ValidationMessage For="() => _model.Name"/>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email: </label>
                    <InputText class="form-control" @bind-Value="_model.Email" />
                    <ValidationMessage For="() => _model.Email"/>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Phone: </label>
                    <InputText class="form-control" @bind-Value="_model.Phone" />
                    <ValidationMessage For="() => _model.Phone" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password: </label>
                    <InputText type="password" class="form-control" @bind-Value="_model.Password" />
                    <ValidationMessage For="() => _model.Password"/>
                </div>
                <div class="mb-3">
                    <label for="role" class="form-label">Register as: </label>
                    <InputSelect class="form-control" @bind-Value="_model.Role">
                        <option value="@UserRole.Student">Student</option>
                        <option value="@UserRole.Teacher">Teacher</option>
                    </InputSelect>
                    <ValidationMessage For="() => _model.Role"/>
                </div>
                @if(_errorMessage != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_errorMessage</p>
                    </div>
                }
                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
                        <a href="auth/login" class="btn btn-outline-primary">Login</a>
                        <button type="submit" class="btn btn-success">Register</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Registering...</button> 
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if(_showSuccessAlert)
{
    <Modal Title="Success" OnActionButtonClick="OnModalClose" OnCancelClick="OnModalClose">
        <p class="h5 text-success">Your account has been created successfully.<br/>
            You will be able to login once Admin approves your account</p>
    </Modal>
})
@code {
    private RegisterDto _model = new();
    private bool _isBusy;
    private string? _errorMessage;
    private bool _showSuccessAlert;

    protected override void OnInitialized()
    {
        if(QuizAuthStateProvider.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/", replace: true); // Redirect to home if already logged in
        }
    }
    private async Task RegisterAsync()
    {
        _errorMessage = null;
        _isBusy = true;
        try
        {
            AppState.ShowLoader("Registering...");
            var apiResponse = await AuthApi.RegisterAsync(_model);
            if (!apiResponse.IsSuccess)
            {
                _errorMessage = apiResponse.ErrorMessage;
                return;
            }
            _showSuccessAlert = true;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isBusy = false;
            AppState.HideLoader();
        }   
    }
    private void OnModalClose()
    {
        _model = new();
        NavigationManager.NavigateTo("auth/login"); // Redirect to login page after successful registration

    }

}
